import { NextResponse } from 'next/server';

// Utilisez votre propre cl√© API OpenWeatherMap (√† mettre dans .env.local)
const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY || 'votre_cle_api';

// V√©rification de base pour la cl√© API
const isAPIKeySet = OPENWEATHER_API_KEY !== 'votre_cle_api' && OPENWEATHER_API_KEY.length > 10;

// Ville par d√©faut pour la m√©t√©o (Paris, France)
const DEFAULT_CITY = 'Paris,fr';

type WeatherResponse = {
  temperature: number;
  condition: string;
  icon: string;
  error?: string;
};

// Mode de fallback pour √©viter d'utiliser l'API externe en cas de probl√®me
const FALLBACK_MODE = true;

// Fonction pour convertir les codes m√©t√©o en ic√¥nes
function getWeatherIcon(weatherCode: string): string {
  try {
    const code = weatherCode.substring(0, 2);
    
    switch (code) {
      case '01': return '‚òÄÔ∏è'; // Ciel d√©gag√©
      case '02': return 'üå§Ô∏è'; // Quelques nuages
      case '03': return '‚òÅÔ∏è'; // Nuages √©pars
      case '04': return '‚òÅÔ∏è'; // Nuageux
      case '09': return 'üåßÔ∏è'; // Averses
      case '10': return 'üå¶Ô∏è'; // Pluie
      case '11': return '‚õàÔ∏è'; // Orages
      case '13': return '‚ùÑÔ∏è'; // Neige
      case '50': return 'üå´Ô∏è'; // Brouillard
      default: return 'üå°Ô∏è';
    }
  } catch (error) {
    console.error('Erreur lors de la conversion du code m√©t√©o:', error);
    return 'üå°Ô∏è';
  }
}

// Fonction pour convertir les conditions m√©t√©o en fran√ßais
function translateWeatherCondition(condition: string): string {
  try {
    if (!condition) return 'Inconnu';
    
    const conditions: {[key: string]: string} = {
      'clear sky': 'Ciel d√©gag√©',
      'few clouds': 'Quelques nuages',
      'scattered clouds': 'Nuages √©pars',
      'broken clouds': 'Nuageux',
      'overcast clouds': 'Couvert',
      'light rain': 'Pluie l√©g√®re',
      'moderate rain': 'Pluie mod√©r√©e',
      'heavy intensity rain': 'Forte pluie',
      'thunderstorm': 'Orage',
      'snow': 'Neige',
      'mist': 'Brume',
      'fog': 'Brouillard'
    };
    
    return conditions[condition.toLowerCase()] || condition;
  } catch (error) {
    console.error('Erreur lors de la traduction de la condition m√©t√©o:', error);
    return 'Inconnu';
  }
}

// Fonction pour obtenir une temp√©rature r√©aliste selon la saison
function getRealisticTemperature(month: number = new Date().getMonth()): number {
  try {
    if (month >= 5 && month <= 8) { // √ât√© (juin-septembre)
      return Math.floor(Math.random() * 10) + 15; // 15-25¬∞C
    } else if (month >= 11 || month <= 2) { // Hiver (d√©cembre-mars)
      return Math.floor(Math.random() * 10) + 0; // 0-10¬∞C
    } else { // Printemps/Automne
      return Math.floor(Math.random() * 10) + 10; // 10-20¬∞C
    }
  } catch (error) {
    console.error('Erreur lors du calcul de la temp√©rature:', error);
    return 15; // Valeur par d√©faut
  }
}

// Fonction pour g√©n√©rer des donn√©es m√©t√©o simul√©es
function getFallbackWeatherData(date: string, errorMessage?: string): WeatherResponse {
  try {
    const requestDate = new Date(date);
    const month = requestDate.getMonth();
    const temperature = getRealisticTemperature(month);
    
    // D√©terminer la condition en fonction de la temp√©rature et d'un facteur al√©atoire
    let condition = 'Ciel d√©gag√©';
    let icon = '‚òÄÔ∏è';
    
    const random = Math.random();
    if (temperature < 5) {
      if (random < 0.3) {
        condition = 'Neige';
        icon = '‚ùÑÔ∏è';
      } else {
        condition = 'Nuageux';
        icon = '‚òÅÔ∏è';
      }
    } else if (temperature < 15) {
      if (random < 0.4) {
        condition = 'Pluie l√©g√®re';
        icon = 'üå¶Ô∏è';
      } else {
        condition = 'Nuages √©pars';
        icon = 'üå§Ô∏è';
      }
    } else {
      if (random < 0.2) {
        condition = 'Quelques nuages';
        icon = 'üå§Ô∏è';
      }
    }
    
    return {
      temperature,
      condition,
      icon,
      error: errorMessage
    };
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration des donn√©es m√©t√©o de secours:', error);
    return {
      temperature: 15,
      condition: 'Donn√©es simul√©es',
      icon: 'üå°Ô∏è',
      error: 'Erreur syst√®me'
    };
  }
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    
    // Param√®tres de la requ√™te
    const date = searchParams.get('date') || new Date().toISOString().split('T')[0];
    const city = searchParams.get('city') || DEFAULT_CITY;
    
    console.log(`Demande m√©t√©o pour: Ville=${city}, Date=${date}`);
    console.log(`Cl√© API utilis√©e: ${OPENWEATHER_API_KEY.substring(0, 3)}...${OPENWEATHER_API_KEY.length > 6 ? OPENWEATHER_API_KEY.substring(OPENWEATHER_API_KEY.length - 3) : ''}`);
    console.log(`Cl√© API valide: ${isAPIKeySet ? 'Oui' : 'Non'}`);
    
    // Si le mode de fallback est activ√© ou si la cl√© API n'est pas d√©finie, renvoyer des donn√©es simul√©es
    if (FALLBACK_MODE || !isAPIKeySet) {
      console.log('Mode de fallback activ√© ou cl√© API non d√©finie, utilisation de donn√©es simul√©es');
      const errorMsg = !isAPIKeySet ? 'Cl√© API OpenWeatherMap non configur√©e' : 'Mode de fallback activ√©';
      return NextResponse.json(getFallbackWeatherData(date, errorMsg));
    }
    
    // V√©rifier si la date est dans le futur (max 5 jours pour la version gratuite)
    const today = new Date();
    const requestDate = new Date(date);
    const diffTime = requestDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    let apiUrl;
    
    // Si la date est aujourd'hui ou dans le pass√©, utiliser l'API m√©t√©o actuelle
    // Sinon, utiliser l'API de pr√©vision
    if (diffDays <= 0) {
      apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${OPENWEATHER_API_KEY}&units=metric&lang=fr`;
      console.log(`Utilisation de l'API m√©t√©o actuelle: ${apiUrl.replace(OPENWEATHER_API_KEY, 'API_KEY')}`);
    } else if (diffDays <= 5) {
      apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${OPENWEATHER_API_KEY}&units=metric&lang=fr`;
      console.log(`Utilisation de l'API pr√©visions: ${apiUrl.replace(OPENWEATHER_API_KEY, 'API_KEY')}`);
    } else {
      // Pour les dates au-del√† de 5 jours, nous ne pouvons pas obtenir de donn√©es pr√©cises avec l'API gratuite
      console.log(`Date trop √©loign√©e: ${diffDays} jours dans le futur`);
      return NextResponse.json(getFallbackWeatherData(date, 'Les pr√©visions ne sont disponibles que pour les 5 prochains jours'));
    }
    
    try {
      const response = await fetch(apiUrl);
      
      if (!response.ok) {
        const statusText = `${response.status} ${response.statusText}`;
        console.error(`Erreur API m√©t√©o: ${statusText}`);
        
        // Tenter de lire le corps de la r√©ponse d'erreur
        try {
          const errorData = await response.json();
          console.error('D√©tails de l\'erreur:', errorData);
        } catch (e) {
          console.error('Impossible de lire les d√©tails de l\'erreur');
        }
        
        throw new Error(`Erreur API m√©t√©o: ${statusText}`);
      }
      
      const data = await response.json();
      console.log('Donn√©es brutes re√ßues de l\'API:', JSON.stringify(data, null, 2));
      
      // Traiter les donn√©es en fonction du type de r√©ponse (actuelle ou pr√©vision)
      if (diffDays <= 0) {
        // Donn√©es m√©t√©o actuelles
        if (!data.main || typeof data.main.temp !== 'number') {
          console.error('Donn√©es m√©t√©o invalides:', data);
          throw new Error('Donn√©es m√©t√©o invalides ou incompl√®tes');
        }
        
        // V√©rifier que la temp√©rature est r√©aliste (entre -50¬∞C et +50¬∞C)
        let temp = Math.round(data.main.temp);
        if (temp < -50 || temp > 50) {
          console.warn(`Temp√©rature anormale re√ßue: ${temp}¬∞C, ajustement √† une valeur r√©aliste`);
          temp = getRealisticTemperature();
        }
        
        const weatherData: WeatherResponse = {
          temperature: temp,
          condition: data.weather && data.weather[0] ? translateWeatherCondition(data.weather[0].description) : 'Inconnu',
          icon: data.weather && data.weather[0] ? getWeatherIcon(data.weather[0].icon) : 'üå°Ô∏è'
        };
        
        console.log('Donn√©es m√©t√©o actuelles trait√©es:', weatherData);
        return NextResponse.json(weatherData);
      } else {
        // Donn√©es de pr√©vision - trouver l'entr√©e pour la date sp√©cifi√©e
        // Les pr√©visions sont donn√©es toutes les 3 heures, on prend celle de midi
        if (!data.list || !Array.isArray(data.list) || data.list.length === 0) {
          console.error('Donn√©es de pr√©vision invalides:', data);
          throw new Error('Donn√©es de pr√©vision invalides ou incompl√®tes');
        }
        
        const dateStr = date + ' 12:00:00';
        const forecast = data.list.find((item: any) => item.dt_txt && item.dt_txt.includes(dateStr));
        
        // Fonction pour traiter les donn√©es m√©t√©o des pr√©visions
        const processWeatherData = (forecastData: any): WeatherResponse => {
          if (!forecastData.main || typeof forecastData.main.temp !== 'number') {
            throw new Error('Donn√©es de pr√©vision incompl√®tes');
          }
          
          // V√©rifier que la temp√©rature est r√©aliste
          let temp = Math.round(forecastData.main.temp);
          if (temp < -50 || temp > 50) {
            console.warn(`Temp√©rature anormale re√ßue: ${temp}¬∞C, ajustement √† une valeur r√©aliste`);
            temp = getRealisticTemperature(new Date(date).getMonth());
          }
          
          return {
            temperature: temp,
            condition: forecastData.weather && forecastData.weather[0] 
              ? translateWeatherCondition(forecastData.weather[0].description) 
              : 'Inconnu',
            icon: forecastData.weather && forecastData.weather[0] 
              ? getWeatherIcon(forecastData.weather[0].icon) 
              : 'üå°Ô∏è'
          };
        };
        
        try {
          if (forecast) {
            const weatherData = processWeatherData(forecast);
            console.log('Donn√©es pr√©vision midi trait√©es:', weatherData);
            return NextResponse.json(weatherData);
          } else {
            // Si on ne trouve pas exactement midi, on prend la premi√®re pr√©vision du jour
            const dayForecast = data.list.find((item: any) => item.dt_txt && item.dt_txt.includes(date));
            
            if (dayForecast) {
              const weatherData = processWeatherData(dayForecast);
              console.log('Donn√©es premi√®re pr√©vision du jour trait√©es:', weatherData);
              return NextResponse.json(weatherData);
            }
          }
        } catch (error) {
          console.error('Erreur lors du traitement des pr√©visions:', error);
          throw error;
        }
      }
      
      // Si on arrive ici, c'est qu'on n'a pas trouv√© de donn√©es pour la date sp√©cifi√©e
      throw new Error('Aucune donn√©e disponible pour cette date');
      
    } catch (fetchError) {
      console.error('Erreur lors de la r√©cup√©ration des donn√©es m√©t√©o:', fetchError);
      // En cas d'erreur avec l'API externe, on renvoie des donn√©es simul√©es
      return NextResponse.json(
        getFallbackWeatherData(date, fetchError instanceof Error ? fetchError.message : 'Erreur de connexion √† l\'API')
      );
    }
    
  } catch (error) {
    console.error('Erreur m√©t√©o g√©n√©rale:', error);
    
    // En cas d'erreur, on renvoie toujours des donn√©es simul√©es avec un message d'erreur
    return NextResponse.json(
      getFallbackWeatherData(
        new Date().toISOString().split('T')[0], 
        error instanceof Error ? error.message : 'Une erreur est survenue'
      )
    );
  }
} 